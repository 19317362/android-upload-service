{"name":"Android Upload Service","tagline":"Easily upload files in the background with automatic Android Notification Center progress indication.","body":"[![Android Arsenal](https://img.shields.io/badge/Android%20Arsenal-Android%20Upload%20Service-brightgreen.svg?style=flat)](http://android-arsenal.com/details/1/2161) [ ![Download](https://api.bintray.com/packages/alexbbb/maven/android-upload-service/images/download.svg) ](https://bintray.com/alexbbb/maven/android-upload-service/_latestVersion) [![Donate](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=alexgotev%40gmail%2ecom&lc=US&item_name=Android%20Upload%20Service&item_number=AndroidUploadService&currency_code=EUR&bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted)\r\n\r\n![Upload Notification](http://alexbbb.github.io/android-upload-service/upload.gif)\r\n\r\nEasily upload files in the background with automatic Android Notification Center progress indication.\r\n\r\n## Purpose\r\n* upload files to a server with an HTTP `multipart/form-data` or binary request\r\n* handle the operation in the background, even if the device is idle\r\n* show status in the Android Notification Center.\r\n\r\nAt the core of the library there is an `IntentService` which handles uploads in the background. It publishes broadcast intents to notify status. This way the logic is decoupled from the UI and it's much more reusable. You can do multiple uploads being sure that they will be performed sequentially, and so you don't have to deal with the nightmare of concurrency. Read further to learn how you can use it in your App.\r\n\r\n## Setup\r\nEnsure that you have jcenter in your gradle build file:\r\n```\r\nrepositories {\r\n    jcenter()\r\n}\r\n```\r\nthen in your dependencies section add:\r\n\r\n```\r\ndependencies {\r\n    compile 'com.alexbbb:uploadservice:1.6'\r\n}\r\n```\r\n\r\nand do a project sync. To start using the library, you have to initialize it. I suggest you to do that in your Application subclass:\r\n```java\r\npublic class Initializer extends Application {\r\n\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n\r\n        // setup the broadcast action namespace string which will\r\n        // be used to notify upload status.\r\n        // Gradle automatically generates proper variable as below.\r\n        UploadService.NAMESPACE = BuildConfig.APPLICATION_ID;\r\n        // Or, you can define it manually.\r\n        UploadService.NAMESPACE = \"com.yourcompany.yourapp\";\r\n    }\r\n}\r\n```\r\nand now you're ready to rock!\r\n\r\n<em>I strongly encourage you to build and run the demo app that you can find in the [examples](#examples), together with one of the provided server implementations and to check [JavaDocs](http://alexbbb.github.io/android-upload-service/javadoc/).</em>\r\n\r\n### HTTP Multipart Upload\r\nThis is the most common way to upload files on a server. It's the same kind of request that browsers do when you use the `<form>` tag with one or more files. Here's a minimal example:\r\n\r\n```java\r\npublic void uploadMultipart(final Context context) {\r\n\r\n    final String uploadID = UUID.randomUUID().toString();\r\n    final String serverUrlString = \"http://www.yoursite.com/yourscript\";\r\n\r\n    try {\r\n        new MultipartUploadRequest(context, uploadID, serverUrlString)\r\n            .addFileToUpload(\"/absolute/path/to/your/file\", \"your-param-name\")\r\n            .addHeader(\"your-custom-header-name\", \"your-custom-value\")\r\n            .addParameter(\"your-param-name\", \"your-param-value\")\r\n            .setNotificationConfig(new UploadNotificationConfig())\r\n            .setMaxRetries(2)\r\n            .startUpload();\r\n    } catch (Exception exc) {\r\n        Log.e(\"AndroidUploadService\", exc.getMessage(), exc);\r\n    }\r\n}\r\n```\r\n\r\n### Binary Upload\r\nThe binary upload uses a single file as the raw body of the upload request.\r\n\r\n``` java\r\npublic void uploadBinary(final Context context) {\r\n\r\n    final String uploadID = UUID.randomUUID().toString();\r\n    final String serverUrlString = \"http://www.yoursite.com/yourscript\";\r\n\r\n    try {\r\n        new BinaryUploadRequest(context, uploadID, serverUrlString)\r\n            .addHeader(\"your-custom-header-name\", \"your-custom-value\")\r\n            .setFileToUpload(\"/absolute/path/to/your/file\")\r\n            .setNotificationConfig(new UploadNotificationConfig())\r\n            .setMaxRetries(2)\r\n            .startUpload();\r\n    } catch (Exception exc) {\r\n        Log.e(\"AndroidUploadService\", exc.getMessage(), exc);\r\n    }\r\n}\r\n```\r\n\r\n### Monitoring upload status\r\nTo listen for the status of the upload service, use the provided `UploadServiceBroadcastReceiver`. Override its methods to add your own business logic. Example on how to use it in an activity:\r\n\r\n```java\r\npublic class YourActivity extends Activity {\r\n\r\n    private static final String TAG = \"AndroidUploadService\";\r\n\r\n    private final UploadServiceBroadcastReceiver uploadReceiver =\r\n    new UploadServiceBroadcastReceiver() {\r\n\r\n        // you can override this progress method if you want to get\r\n        // the completion progress in percent (0 to 100)\r\n        // or if you need to know exactly how many bytes have been transferred\r\n        // override the method below this one\r\n        @Override\r\n        public void onProgress(String uploadId, int progress) {\r\n            Log.i(TAG, \"The progress of the upload with ID \"\r\n                       + uploadId + \" is: \" + progress);\r\n        }\r\n\r\n        @Override\r\n        public void onProgress(final String uploadId,\r\n                               final long uploadedBytes,\r\n                               final long totalBytes) {\r\n            Log.i(TAG, \"Upload with ID \" + uploadId +\r\n                       \" uploaded bytes: \" + uploadedBytes\r\n                       + \", total: \" + totalBytes);\r\n        }\r\n\r\n        @Override\r\n        public void onError(String uploadId, Exception exception) {\r\n            Log.e(TAG, \"Error in upload with ID: \" + uploadId + \". \"\r\n                       + exception.getLocalizedMessage(), exception);\r\n        }\r\n\r\n        @Override\r\n        public void onCompleted(String uploadId,\r\n                                int serverResponseCode,\r\n                                String serverResponseMessage) {\r\n            Log.i(TAG, \"Upload with ID \" + uploadId\r\n                       + \" has been completed with HTTP \" + serverResponseCode\r\n                       + \". Response from server: \" + serverResponseMessage);\r\n\r\n            //If your server responds with a JSON, you can parse it\r\n            //from serverResponseMessage string using a library\r\n            //such as org.json (embedded in Android) or Google's gson\r\n        }\r\n    };\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        uploadReceiver.register(this);\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        uploadReceiver.unregister(this);\r\n    }\r\n\r\n}\r\n```\r\n\r\nIf you want to monitor upload status in all of your activities, just implement the BroadcastReceiver in your base activity class from which all of your activities inherits and you're done.\r\n\r\n### Stop current upload\r\nCall this method from anywhere you want to stop the currently active upload task.\r\n```java\r\nUploadService.stopCurrentUpload();\r\n```\r\nAfter that the upload task is cancelled, you will receive a `java.net.ProtocolException` in your broadcast receiver's `onError` method and the notification will display the error message that you have set.\r\n\r\n### Using HTTPS connection with self-signed certificates\r\nFor security reasons, the library doesn't accept self-signed certificates by default when using HTTPS connections, but you can enable them by calling:\r\n\r\n```java\r\nAllCertificatesAndHostsTruster.apply();\r\n```\r\n\r\nbefore starting the upload service.\r\n\r\n### Upload only when a connection is available\r\nIf you want to start uploads or retry them based on the remote server's reachability status, [Android Host Monitor](https://github.com/alexbbb/android-host-monitor) may be useful to you in combination with this library.\r\n\r\n### Testing upload\r\nYou have the following choices:\r\n* Use your own server which handles HTTP/Multipart uploads\r\n* Use one of the server implementations provided in the examples (read below)\r\n* Use the excellent http://www.posttestserver.com/ (bear in mind that the data you post there is public!) for HTTP Multipart\r\n\r\n### Examples <a name=\"examples\"></a>\r\nIn the <b>examples</b> folder you will find:\r\n\r\n* A simple Android application that uses this library\r\n\r\n* Demo servers which handle upload in:\r\n  * <b>node.js (HTTP Multipart and Binary)</b>. You need to have node.js and npm installed. [Refer to this guide](https://github.com/joyent/node/wiki/installing-node.js-via-package-manager). To run the server, open a terminal, navigate to ```examples/server-nodejs``` folder and simply execute:\r\n\r\n    ```\r\n    npm install (only the first time)\r\n    npm start\r\n    ```\r\n    The following endpoints will be available for upload testing:\r\n    ```\r\n    HTTP/Multipart: http://YOUR_LOCAL_IP:3000/upload/multipart\r\n    Binary:         http://YOUR_LOCAL_IP:3000/upload/binary\r\n    ```\r\n  * <b>PHP (HTTP Multipart only)</b>. You need a running web server (e.g. Apache + PHP) in which to put the script. To get up and running in minutes you can use a solution like [XAMPP (supports Windows, OS X and Linux)](https://www.apachefriends.org/download.html).\r\n\r\n## Apps powered by Android Upload Service\r\nTo be included in the following list, simply create an issue and provide the app name and a link.\r\n\r\n- [VoiSmart IP Communicator](https://play.google.com/store/apps/details?id=com.voismart.softphone)\r\n- [DotShare](http://dot-share.com/index-en.html)\r\n- [NativeScript Background HTTP](https://www.npmjs.com/package/nativescript-background-http)\r\n\r\n## Contribute\r\n* Do you have a new feature in mind?\r\n* Do you know how to improve existing docs or code?\r\n* Have you found a bug?\r\n\r\nContributions are welcome and encouraged! Just fork the project and then send a pull request. Be ready to discuss your code and design decisions :)\r\n\r\n## Before asking for help...\r\nLet's face it, doing network programming is not easy as there are many things that can go wrong, but if upload doesn't work out of the box, consider the following things before posting a new issue:\r\n* Is the server URL correct?\r\n* Is the server URL reachable from your device? Check if there are firewalls or other kind of restrictions between your device and the server.\r\n* Are you sure that the server side is working properly?\r\n* Have you properly set up the request with all the headers, parameters and files that the server expects?\r\n* Have you tried to make an upload using the demo app and one of the provided server implementations? I use the node.js version which provides good feedback and supports both HTTP Multipart and binary uploads.\r\n\r\nIf you've checked all the above and still something goes wrong...it's time to create a new issue! Be sure to include the following info:\r\n* Android API version\r\n* Device vendor and model\r\n* Code used to generate the request. Replace sensible data values.\r\n* LogCat output\r\n* Server output\r\n\r\nPlease make use of Markdown styling when you post code or console output.\r\n\r\n## Do you like the project?\r\nPut a star, spread the word and if you want to offer me a free beer, [![Donate](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=alexgotev%40gmail%2ecom&lc=US&item_name=Android%20Upload%20Service&item_number=AndroidUploadService&currency_code=EUR&bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted)\r\n\r\n## License\r\n\r\n    Copyright (C) 2013-2015 Aleksandar Gotev\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}